<ResourceDictionary x:Class="Nart.Resource.DarkThemeStyle"
                    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:Microsoft_Windows_Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero">


    <Style x:Key="CustomWindowStyle" TargetType="{x:Type Window}">
        <Setter Property="BorderBrush" Value="#FF232323" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Window}">
                    <Grid>
                        <Border BorderBrush="Black" BorderThickness="1">
                                <Border Background="{TemplateBinding Background}"
                                        BorderBrush="{TemplateBinding BorderBrush}"
                                        BorderThickness="0,30,0,0">
                                    <AdornerDecorator>
                                        <ContentPresenter />
                                    </AdornerDecorator>
                                </Border>   
                        </Border>
                        <DockPanel Height="30"
                                   VerticalAlignment="Top"
                                   LastChildFill="False">

                            <TextBlock Margin="15,0,0,0"
                                       VerticalAlignment="Center"
                                       DockPanel.Dock="Left"                                       
                                       FontSize="14"
                                       Foreground="#FFC7C7C7"                                       
                                       Text="{TemplateBinding Title}" FontFamily="Microsoft NeoGothic" />

                            <Button x:Name="btnClose"
                                    Width="50"
                                    Height="{Binding Path=Width, RelativeSource={RelativeSource AncestorType=DockPanel, Mode=FindAncestor}}"                                    
                                    FontWeight="Heavy"                        
                                    FontSize="18"
                                    Click="CloseClick"
                                    DockPanel.Dock="Right"
                                    WindowChrome.IsHitTestVisibleInChrome="True">
                                <Button.Style>
                                    <Style TargetType="{x:Type Button}">
                                        <Setter Property="Background" Value="Transparent"/>
                                        <Setter Property="Foreground" Value="White"/>
                                        <Setter Property="Template">
                                            <Setter.Value>
                                                <ControlTemplate TargetType="{x:Type Button}">
                                                    <Border Background="{TemplateBinding Background}" >
                                                        <ContentPresenter Content="╳" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                                    </Border>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                        <Style.Triggers>
                                            <Trigger Property="IsMouseOver" Value="True">
                                                <Trigger.Setters>
                                                    <Setter Property="Background" Value="#FFE81123" />
                                                </Trigger.Setters>
                                            </Trigger>
                                        </Style.Triggers>
                                    </Style>
                                </Button.Style>
                            </Button>

                            <Button x:Name="btnRestore"
                                    Width="50"
                                    Visibility="Collapsed"
                                    Height="{Binding Path=Width, RelativeSource={RelativeSource Self}}"
                                    Background="Transparent"
                                    Foreground="#FFC7C7C7"
                                    BorderThickness="0"                                    
                                    FontSize="18"
                                    Margin="5"
                                    Click="MaximizeRestoreClick"
                                    Content="#"
                                    DockPanel.Dock="Right"
                                    WindowChrome.IsHitTestVisibleInChrome="True" />

                            <Button x:Name="btnMinimize"
                                    Width="50"
                                    Height="{Binding Path=Width, RelativeSource={RelativeSource AncestorType=DockPanel, Mode=FindAncestor}}"                                                       
                                    FontWeight="Heavy"                        
                                    FontSize="18"
                                    Click="MinimizeClick"
                                    DockPanel.Dock="Right"
                                    WindowChrome.IsHitTestVisibleInChrome="True" >
                                <Button.Style>
                                    <Style TargetType="{x:Type Button}"><!--有指定TargetType的話，下面的Property 不用特別指定哪個控制項--> 
                                        <Setter Property="Background" Value="Transparent"/>
                                        <Setter Property="Foreground" Value="White"/>
                                        <Setter Property="Template">
                                            <Setter.Value>
                                                <ControlTemplate TargetType="{x:Type Button}">
                                                    <Border Background="{TemplateBinding Background}" >
                                                        <ContentPresenter Content="─" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                                    </Border>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                        <Style.Triggers>
                                            <Trigger Property="IsMouseOver" Value="True">
                                                <Trigger.Setters>
                                                    <Setter Property="Background" Value="#FF585859" />
                                                </Trigger.Setters>
                                            </Trigger>
                                        </Style.Triggers>
                                    </Style>
                                </Button.Style>
                            </Button>
                        </DockPanel>

                    </Grid>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CustomViewStyle" TargetType="{x:Type Window}">
        <Setter Property="BorderBrush" Value="#FF3F3F46" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Window}">
                    <Grid>
                        <Border BorderBrush="Black" BorderThickness="1">
                            <Border Background="{TemplateBinding Background}"
                                        BorderBrush="{TemplateBinding BorderBrush}"
                                        BorderThickness="0,30,0,0">
                                <AdornerDecorator>
                                    <ContentPresenter />
                                </AdornerDecorator>
                            </Border>
                        </Border>
                        <DockPanel Height="30"
                                   VerticalAlignment="Top"
                                   LastChildFill="False">

                            <TextBlock Margin="15,0,0,0"
                                       VerticalAlignment="Center"
                                       DockPanel.Dock="Left"                                       
                                       FontSize="14"
                                       Foreground="#FFC7C7C7"                                       
                                       Text="{TemplateBinding Title}" FontFamily="Microsoft NeoGothic" />

                            <Button x:Name="btnClose"
                                    Width="50"
                                    Margin="0"
                                    Height="{Binding Path=Width, RelativeSource={RelativeSource AncestorType=DockPanel, Mode=FindAncestor}}"                                    
                                    FontWeight="Heavy"                        
                                    FontSize="18"
                                    Click="HideViewClick"
                                    DockPanel.Dock="Right"
                                    WindowChrome.IsHitTestVisibleInChrome="True">
                                <Button.Style>
                                    <Style TargetType="{x:Type Button}">
                                        <Setter Property="Background" Value="Transparent"/>
                                        <Setter Property="Foreground" Value="White"/>
                                        <Setter Property="Template">
                                            <Setter.Value>
                                                <ControlTemplate TargetType="{x:Type Button}">
                                                    <Border Background="{TemplateBinding Background}" >
                                                        <ContentPresenter Content="╳" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                                    </Border>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                        <Style.Triggers>
                                            <Trigger Property="IsMouseOver" Value="True">
                                                <Setter Property="Background" Value="#FFE81123" />
                                            </Trigger>
                                        </Style.Triggers>
                                    </Style>
                                </Button.Style>
                            </Button>
                        </DockPanel>

                    </Grid>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="RoundCorner" TargetType="{x:Type Button}">
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid x:Name="grid">
                        <Border x:Name="border" CornerRadius="8" BorderBrush="Black" BorderThickness="2">
                            <Border.Background>
                                <RadialGradientBrush GradientOrigin="0.496,1.052">
                                    <RadialGradientBrush.RelativeTransform>
                                        <TransformGroup>
                                            <ScaleTransform CenterX="0.5" CenterY="0.5" 
                                                        ScaleX="1.5" ScaleY="1.5"/>
                                            <TranslateTransform X="0.02" Y="0.3"/>
                                        </TransformGroup>
                                    </RadialGradientBrush.RelativeTransform>
                                    <GradientStop Offset="1" Color="#00000000"/>
                                    <GradientStop Offset="0.3" Color="#FFFFFFFF"/>
                                </RadialGradientBrush>
                            </Border.Background>
                            <ContentPresenter HorizontalAlignment="Center"
                                          VerticalAlignment="Center"
                                          TextElement.FontWeight="Bold">
                            </ContentPresenter>
                        </Border>

                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="border">
                                <Setter.Value>
                                    <RadialGradientBrush GradientOrigin="0.496,1.052">
                                        <RadialGradientBrush.RelativeTransform>
                                            <TransformGroup>
                                                <ScaleTransform CenterX="0.5" CenterY="0.5" ScaleX="1.5" ScaleY="1.5"/>
                                                <TranslateTransform X="0.02" Y="0.3"/>
                                            </TransformGroup>
                                        </RadialGradientBrush.RelativeTransform>
                                        <GradientStop Color="#00000000" Offset="1"/>
                                        <GradientStop Color="#FF303030" Offset="0.3"/>
                                    </RadialGradientBrush>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="#FF33962B"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" TargetName="grid" Value="0.25"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="SideButton" TargetType="{x:Type Button}">
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="FontSize" Value="18"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="FontFamily" Value="Microsoft JhengHei"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="#FFB4B4B4"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}" >
                        <ContentPresenter Content="{TemplateBinding Content}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Trigger.Setters>
                                <Setter Property="Background" Value="#FF09518B" />
                            </Trigger.Setters>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Trigger.Setters>
                                <Setter Property="Background" Value="#FF226AA4" />
                            </Trigger.Setters>
                        </Trigger>
                    </ControlTemplate.Triggers>


                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  +-號版本的toggle button  -->
    <ControlTemplate x:Key="SimpleExpanderButtonTemp"
                         TargetType="{x:Type ToggleButton}">
        <Border x:Name="ExpanderButtonBorder"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    CornerRadius="2"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    Padding="{TemplateBinding Padding}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <Rectangle Fill="Transparent"
                               Grid.ColumnSpan="2" />
                <Ellipse Name="Circle"
                             Grid.Column="0"
                             Stroke="Black"
                             Width="20"
                             Height="20"
                             HorizontalAlignment="Center"
                             VerticalAlignment="Center" />
                <Path x:Name="Sign"
                          Grid.Column="0"
                          Data="M 0,5 H 10 M 5,0 V 10 Z"
                          Stroke="#FF666666"
                          Width="10"
                          Height="10"
                          StrokeThickness="2"
                          HorizontalAlignment="Center"
                          VerticalAlignment="Center"
                          RenderTransformOrigin="0.5,0.5" />
                <ContentPresenter x:Name="HeaderContent"
                                      Grid.Column="1"
                                      Margin="4,0,0,0"
                                      ContentSource="Content" />
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <!--Change the sign to minus when toggled-->
            <Trigger Property="IsChecked"
                         Value="True">
                <Setter Property="Data"
                            TargetName="Sign"
                            Value="M 0,5 H 10 Z" />
            </Trigger>

            <!-- MouseOver, Pressed behaviours-->
            <Trigger Property="IsMouseOver"
                         Value="true">
                <Setter Property="Stroke"
                            Value="#FF3C7FB1"
                            TargetName="Circle" />
                <Setter Property="Stroke"
                            Value="#222"
                            TargetName="Sign" />
            </Trigger>
            <Trigger Property="IsPressed"
                         Value="true">
                <Setter Property="Stroke"
                            Value="#FF526C7B"
                            TargetName="Circle" />
                <Setter Property="StrokeThickness"
                            Value="1.5"
                            TargetName="Circle" />
                <Setter Property="Stroke"
                            Value="#FF003366"
                            TargetName="Sign" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!-- 利用加號減號的toggle做出來的 Expander-->
    <ControlTemplate x:Key="SimpleExpanderTemp"
                         TargetType="{x:Type Expander}">
        <DockPanel>
            <ToggleButton x:Name="ExpanderButton"
                              DockPanel.Dock="Top"
                              Template="{StaticResource SimpleExpanderButtonTemp}"
                              Content="{TemplateBinding Header}"
                              IsChecked="{Binding Path=IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                              OverridesDefaultStyle="True"
                              Padding="1.5,0">
            </ToggleButton>
            <ContentPresenter x:Name="ExpanderContent"
                                  Grid.Row="1"
                                  Visibility="Collapsed"
                                  DockPanel.Dock="Bottom" />
        </DockPanel>
        <ControlTemplate.Triggers>
            <Trigger Property="IsExpanded"
                         Value="True">
                <Setter TargetName="ExpanderContent"
                            Property="Visibility"
                            Value="Visible" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!-- Animated Expander Button's Template-->
    <ControlTemplate x:Key="AnimatedExpanderButtonTemp"
                         TargetType="{x:Type ToggleButton}">
        <Border x:Name="ExpanderButtonBorder"                
                    CornerRadius="2"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    Padding="{TemplateBinding Padding}">
            <Grid Height="30">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <Rectangle Fill="Transparent"
                               Grid.ColumnSpan="2" />
                <Ellipse Name="Circle"
                             Grid.Column="0"
                             Fill="White"
                             Stroke="Black"
                             Width="20"
                             Height="20"
                             HorizontalAlignment="Center"
                             VerticalAlignment="Center" />
                <Path x:Name="Arrow"
                          Grid.Column="0"
                          Data="M 1,1.5 L 4.5,5 8,1.5"
                          Stroke="Black"
                          StrokeThickness="2"
                          HorizontalAlignment="Center"
                          VerticalAlignment="Center"
                          RenderTransformOrigin="0.5,0.5">
                    <Path.RenderTransform>
                        <RotateTransform Angle="0" />
                    </Path.RenderTransform>
                </Path>
                <ContentPresenter x:Name="HeaderContent"
                                      VerticalAlignment="Center"
                                      Grid.Column="1"
                                      Margin="4,0,0,0"
                                      ContentSource="Content" />
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <!-- Animate arrow when toggled-->
            <Trigger Property="IsChecked"
                         Value="True">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="Arrow"
                                                 Storyboard.TargetProperty="(Path.RenderTransform).(RotateTransform.Angle)"
                                                 To="180"
                                                 Duration="0:0:0.2" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="Arrow"
                                                 Storyboard.TargetProperty="(Path.RenderTransform).(RotateTransform.Angle)"
                                                 To="0"
                                                 Duration="0:0:0.2" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>

            <!-- MouseOver, Pressed behaviours-->
            <Trigger Property="IsMouseOver"
                         Value="true">
                <Setter Property="Stroke"
                            Value="#FF3C7FB1"
                            TargetName="Circle" />
                <Setter Property="Stroke"
                            Value="#222"
                            TargetName="Arrow" />
            </Trigger>
            <Trigger Property="IsPressed"
                         Value="true">
                <Setter Property="Stroke"
                            Value="#FF526C7B"
                            TargetName="Circle" />
                <Setter Property="StrokeThickness"
                            Value="1.5"
                            TargetName="Circle" />
                <Setter Property="Stroke"
                            Value="#FF003366"
                            TargetName="Arrow" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!-- Stretch Out Content Expander's Template,
        Uses: AnimatedExpanderButtonTemp from above-->
    <ControlTemplate x:Key="StretchyExpanderTemp"
                         TargetType="{x:Type Expander}">
        <DockPanel>
            <ToggleButton x:Name="ExpanderButton"
                              Background="{TemplateBinding Background}"
                              BorderBrush="{TemplateBinding BorderBrush}"                                          
                              BorderThickness="{TemplateBinding BorderThickness}"
                              DockPanel.Dock="Top"
                              Template="{StaticResource AnimatedExpanderButtonTemp}"
                              Content="{TemplateBinding Header}"
                              IsChecked="{Binding Path=IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                              OverridesDefaultStyle="True"
                              Padding="1.5,0">
            </ToggleButton>
            <ContentPresenter x:Name="ExpanderContent"
                                  ContentSource="Content"
                                  DockPanel.Dock="Bottom">
                <ContentPresenter.LayoutTransform>
                    <ScaleTransform ScaleY="0" />
                </ContentPresenter.LayoutTransform>
            </ContentPresenter>
        </DockPanel>
        <ControlTemplate.Triggers>
            <Trigger Property="IsExpanded"
                         Value="True">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="ExpanderContent"
                                                 Storyboard.TargetProperty="(ContentPresenter.LayoutTransform).(ScaleTransform.ScaleY)"
                                                 To="1"
                                                 Duration="0:0:0.2" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="ExpanderContent"
                                                 Storyboard.TargetProperty="(ContentPresenter.LayoutTransform).(ScaleTransform.ScaleY)"
                                                 To="0"
                                                 Duration="0:0:0.2" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>

        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--自製的Setting Button-->
    <Style x:Key="SettingButton" TargetType="{x:Type Button}">
        <!--有指定TargetType的話，下面的Property 不用特別指定哪個控制項-->
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="Border" HorizontalAlignment="Center" Height="40">
                        <Grid Background="Transparent" HorizontalAlignment="Center">
                            <Ellipse Name="Circle"
                                                        StrokeThickness="3"                                           
                                                        Stroke="Transparent"
                                                        Fill="Transparent"
                                                        Width="80"
                                                        Height="80"
                                                        HorizontalAlignment="Center"
                                                        VerticalAlignment="Center" />
                            <Grid Margin="0,10">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="1*"/>
                                    <RowDefinition Height="1*"/>
                                    <RowDefinition Height="1*"/>
                                </Grid.RowDefinitions>
                                <Border x:Name="border1" BorderBrush="#FFB4B4B4" BorderThickness="1" CornerRadius="1" Height="Auto" Width="25" HorizontalAlignment="Stretch" VerticalAlignment="Center" Grid.Row="0"/>
                                <Border x:Name="border2" BorderBrush="#FFB4B4B4" BorderThickness="1" CornerRadius="1" Height="Auto" Width="25" HorizontalAlignment="Stretch" VerticalAlignment="Center" Grid.Row="1"/>
                                <Border x:Name="border3" BorderBrush="#FFB4B4B4" BorderThickness="1" CornerRadius="1" Height="Auto" Width="25" HorizontalAlignment="Stretch" VerticalAlignment="Center" Grid.Row="2"/>
                            </Grid>
                            <ContentPresenter x:Name="HeaderContent"
                                      VerticalAlignment="Center"                                      
                                      ContentSource="Content" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <!--<Setter Property="BorderThickness"  Value="1" TargetName="border1" />
                            <Setter Property="BorderThickness"  Value="1" TargetName="border2" />
                            <Setter Property="BorderThickness"  Value="1" TargetName="border3" />-->
                            <Setter Property="Cursor" Value="Hand"/>
                            <Setter Property="BorderBrush"  Value="#FFC9BFBF" TargetName="border1" />
                            <Setter Property="BorderBrush"  Value="#FFC9BFBF" TargetName="border2" />
                            <Setter Property="BorderBrush"  Value="#FFC9BFBF" TargetName="border3" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="BorderBrush"  Value="#FF8F8F8F" TargetName="border1" />
                            <Setter Property="BorderBrush"  Value="#FF8F8F8F" TargetName="border2" />
                            <Setter Property="BorderBrush"  Value="#FF8F8F8F" TargetName="border3" />
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>

            </Setter.Value>
        </Setter>
    </Style>

    <!--自製的Scroll viewer-->
    <ControlTemplate x:Key="ScrollViewerControlTemplate" TargetType="{x:Type ScrollViewer}">
        <Grid x:Name="Grid" Background="{TemplateBinding Background}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition />
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <Rectangle x:Name="Corner" Grid.Column="1" Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" Grid.Row="1"/>
            <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" CanContentScroll="{TemplateBinding CanContentScroll}" CanHorizontallyScroll="False" CanVerticallyScroll="False" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Grid.RowSpan="2" Margin="{TemplateBinding Padding}" Grid.ColumnSpan="2"/>
            <ScrollBar x:Name="PART_VerticalScrollBar" AutomationProperties.AutomationId="VerticalScrollBar" Cursor="Arrow" Grid.Column="1" Maximum="{TemplateBinding ScrollableHeight}" Minimum="0" Grid.Row="0" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportHeight}" Width="8"/>
            <ScrollBar x:Name="PART_HorizontalScrollBar" AutomationProperties.AutomationId="HorizontalScrollBar" Cursor="Arrow" Grid.Column="0" Maximum="{TemplateBinding ScrollableWidth}" Minimum="0" Orientation="Horizontal" Grid.Row="1" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportWidth}" Height="8"/>
        </Grid>
    </ControlTemplate>
    <Style x:Key="ScrollBarPageButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Rectangle Fill="{TemplateBinding Background}" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="HorizontalThumb" TargetType="{x:Type Thumb}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="4" />
                            <ColumnDefinition Width="4" />
                            <ColumnDefinition />
                            <ColumnDefinition Width="4" />
                            <ColumnDefinition Width="4" />
                        </Grid.ColumnDefinitions>
                        <Ellipse Grid.Column="0" Grid.ColumnSpan="2" Fill="#FFF4F4F5" />
                        <Rectangle Grid.Column="1" Grid.ColumnSpan="3" Fill="#FFF4F4F5" />
                        <Ellipse Grid.Column="3" Grid.ColumnSpan="2" Fill="#FFF4F4F5" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="VerticalThumb" TargetType="{x:Type Thumb}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="4" />
                            <RowDefinition Height="4" />
                            <RowDefinition />
                            <RowDefinition Height="4" />
                            <RowDefinition Height="4" />
                        </Grid.RowDefinitions>
                        <Ellipse Grid.Row="0" Grid.RowSpan="2" Fill="#FFF4F4F5" />
                        <Rectangle Grid.Row="1" Grid.RowSpan="3" Fill="#FFF4F4F5" />
                        <Ellipse Grid.Row="3" Grid.RowSpan="2" Fill="#FFF4F4F5" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type ScrollBar}">
        <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="Width" Value="10"/>
        <Setter Property="MinWidth" Value="10"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">
                    <Grid x:Name="Bg" SnapsToDevicePixels="true" Background="#7FBFBFBF">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="0.00001*"/>
                        </Grid.RowDefinitions>
                        <Track x:Name="PART_Track" IsDirectionReversed="true" IsEnabled="{TemplateBinding IsMouseOver}" Grid.Row="1">
                            <Track.DecreaseRepeatButton>
                                <RepeatButton Command="{x:Static ScrollBar.PageUpCommand}" Style="{StaticResource ScrollBarPageButton}"/>
                            </Track.DecreaseRepeatButton>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton Command="{x:Static ScrollBar.PageDownCommand}" Style="{StaticResource ScrollBarPageButton}"/>
                            </Track.IncreaseRepeatButton>
                            <Track.Thumb>
                                <Thumb Style="{DynamicResource VerticalThumb}" Microsoft_Windows_Themes:ScrollChrome.ScrollGlyph="VerticalGripper" Width="8"/>
                            </Track.Thumb>
                        </Track>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Horizontal">
                <Setter Property="Width" Value="Auto"/>
                <Setter Property="MinWidth" Value="0"/>
                <Setter Property="Height" Value="10"/>
                <Setter Property="MinHeight" Value="10"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ScrollBar}">
                            <Grid x:Name="Bg" SnapsToDevicePixels="true" Background="#7FA7A7A7">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="0.00001*"/>
                                </Grid.ColumnDefinitions>
                                <Track x:Name="PART_Track" Grid.Column="1" IsEnabled="{TemplateBinding IsMouseOver}">
                                    <Track.DecreaseRepeatButton>
                                        <RepeatButton Command="{x:Static ScrollBar.PageLeftCommand}" Style="{StaticResource ScrollBarPageButton}"/>
                                    </Track.DecreaseRepeatButton>
                                    <Track.IncreaseRepeatButton>
                                        <RepeatButton Command="{x:Static ScrollBar.PageRightCommand}" Style="{StaticResource ScrollBarPageButton}"/>
                                    </Track.IncreaseRepeatButton>
                                    <Track.Thumb>
                                        <Thumb Microsoft_Windows_Themes:ScrollChrome.ScrollGlyph="HorizontalGripper" Style="{DynamicResource HorizontalThumb}" Height="8"/>
                                    </Track.Thumb>
                                </Track>
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

 
</ResourceDictionary>
